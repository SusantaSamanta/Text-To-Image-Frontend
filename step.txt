⭐⭐⭐  Steps to install tailwind css in react : ⭐⭐⭐
1.  npm install tailwindcss @tailwindcss/vite
2.  in vit.config.js : import { defineConfig } from 'vite'
                       import react from '@vitejs/plugin-react'
                       import tailwindcss from '@tailwindcss/vite';  ⭐
                       
                       // https://vite.dev/config/
                       export default defineConfig({
                         plugins: [react(), tailwindcss()⭐],
                       })
        this two line
3.  in src/index.css :  @import "tailwindcss";   on top line 
4.  install tailwind css extension 


⭐⭐⭐ If we want to get reference of any html element then we do : 

    import useRef

    export function App = () => {
      const eleRef = useRef(null);
      useEffect({
        log or do something on eleRef.current  /// this can give the reference of div which ref={eleRef}
      }, []);
      return(
        <div ref={eleRef}>This ref={give the reference of this Div}</div>
      );
    }








import React, { useRef, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { IoSend } from "react-icons/io5";

const Generate = () => {

  const userChatContent = [
    {
      prompt: 'Susanta image in side field',
      imageUrl: '../src/assets/1.jpg'
    },
    ...........

  ]

  const userChatRef = useRef(null);

  useEffect(() => {
    userChatRef.current?.scrollIntoView({behavior: 'smooth'});
    console.log(userChatRef.current);

  }, [])
}


//////  How to implement Protected routes /////

S1 : Create a component called ProtectedRoute
      export ProtectedRoute (props) {
        get value of isUserLogin 
        return(
          isUserLogin? props.children : <Navigate to={'/login'} /> ///mean if user login then render chider or redetect to login
        )                                                             /// we can get children from App.js >> Routes >> Route >> element={<ProtectedRoute><Generate/></ProtectedRoute>}                          
      }                                                                   /// where <Generate/> component send as a props from App.js

S2 :    <Routes>
          <Route path='/' element={<Home />} />
          <Route path='/generate' element={
            <ProtectRoute>
              <Generate />     /// this will go to <ProtectedRoute> As a props.children  </ProtectedRoute>
            </ProtectRoute>
          } />
        </Routes>

////            In our case we can set the value of showLoginPage = true && redirect to Home page (Because it make loop : accessing generate page again and again);















